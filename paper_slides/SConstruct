# Preliminaries
import os
import sys
sys.dont_write_bytecode = True # Don't write .pyc files

# Test for proper prerequisites and setup
from configuration_test import configuration_test
[mode, cache_dir] = configuration_test(ARGUMENTS, gslab_python_version = '4.1.0')
import gslab_scons as gs
import gslab_scons.log as log
import yaml
import atexit

# Start log after getting mode and release version
mode = ARGUMENTS.get('mode', 'develop') 
vers = ARGUMENTS.get('version', '') 
log.start_log(mode, vers)

# Define the SCons environment
env = Environment(ENV = {'PATH': os.environ['PATH']}, 
                  IMPLICIT_COMMAND_DEPENDENCIES = 0,
                  BUILDERS = {'BuildLyx':   Builder(action = gs.build_lyx),
                              'BuildLatex': Builder(action = gs.build_latex),
                              'Tablefill':  Builder(action = gs.build_tables)})

# Only computes hash if time-stamp changed
env.Decider('MD5-timestamp') 
# Extensions to be used when scanning for source files in BuildLyx.
env.EXTENSIONS = ['.eps', '.pdf', '.lyx']
SourceFileScanner.add_scanner('.lyx', Scanner(gs.misc.lyx_scan, recursive = True))
# Load paths
env['PATHS'] = yaml.load(open('config_global.yaml', 'rU'))

# Export environment
Export('env')

# Run sub-trees
SConscript('source/tables/SConscript')
SConscript('source/paper/SConscript')
SConscript('source/talk/SConscript')
Default('./build', './release')

# Additional mode options
if mode == 'cache':
    CacheDir(cache_dir)

# Debrief args is a dictionary storing the arguments that are useful for functions to run 
# after all Scons targets have been built. Scons_debrief will pass these args into those functions. 
debrief_args = {
               'look_in'            : 'release;source',    # Folders to look in for large versioned files
               'file_MB_limit_lfs'  : 2,                   # Soft limit on file size (w/ LFS);
               'total_MB_limit_lfs' : 500,                 # Soft limit on total size (w/ LFS);  
               'file_MB_limit'      : 0.5,                 # Soft limit on file size (w/o LFS);
               'total_MB_limit'     : 125,                 # Soft limit on total size (w/o LFS);  
               'lfs_required'       : gs.misc.load_yaml_value('config_global.yaml', 'prereq_git-lfs'), # Check if the repo requires LFS
               'git_attrib_path'    : '../.gitattributes', # .gitattributes location
               'MAXIT'              : 10,                  # max number of iterations to write file information to log
               'log'                : 'state_of_repo.log'  # state of repo log file location
               }

               
atexit.register(log.end_log)
atexit.register(gs.misc.scons_debrief, target = 'state_of_repo.log', env = debrief_env)


# Preliminaries
import os
import sys
import atexit
import yaml
sys.path.append('../config')
sys.dont_write_bytecode = True # Don't write .pyc files

# Setup
from configuration import configuration
[mode, vers, cache_dir] = configuration(ARGUMENTS)
import gslab_scons as gs
from gslab_scons import log, misc

# Start log
log.start_log(mode, vers)

# Define the SCons environment
env = Environment(ENV = {'PATH': os.environ['PATH']}, 
                  IMPLICIT_COMMAND_DEPENDENCIES = 0,
                  BUILDERS = {
                              # 'BuildLatex' : Builder(action = gs.build_latex),
                              'BuildLyx'   : Builder(action = gs.build_lyx),
                              # 'BuildMatlab': Builder(action = gs.build_matlab),
                              'BuildPython': Builder(action = gs.build_python),
                              # 'BuildR'     : Builder(action = gs.build_r),
                              # 'BuildStata' : Builder(action = gs.build_stata),
                              'Tablefill'  : Builder(action = gs.build_tables)
                              })


# Only computes hash if time-stamp changed
env.Decider('MD5-timestamp') 
# Extensions to be used when scanning for source files in BuildLyx.
env.EXTENSIONS = ['.eps', '.pdf', '.lyx']
SourceFileScanner.add_scanner('.lyx', Scanner(gs.misc.lyx_scan, recursive = True))
# Load paths
env['PATHS'] = yaml.load(open('config_global.yaml', 'rU'))
# Load Stata executable if Stata builder is defined
if 'BuildStata' in env['BUILDERS'].keys():
   env['stata_executable'] = misc.load_yaml_value('config_user.yaml', 'stata_executable')

# Export environment
Export('env')

# Run sub-trees
SConscript('source/prepare_data/SConscript')
SConscript('source/descriptive/SConscript')
Default('./build', './release')

# Additional mode options
if mode == 'cache':
    CacheDir(cache_dir)

debrief_env = {'MAXIT' : 10,
               # Folders to look in for large versioned files
               'look_in' : 'release;source',
               # Soft limits on file sizes
               'file_MB_limit' : 2,
               'total_MB_limit' : 500}

atexit.register(log.end_log)
atexit.register(gs.misc.scons_debrief, target = 'state_of_repo.log', env = debrief_env)
